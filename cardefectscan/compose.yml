version: '3.8'

services:
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    ports:
      - "8081:8080"
    environment:
      SWAGGER_JSON: /swagger.yaml
    volumes:
      - ./src/main/resources/cardefectscan.yaml:/swagger.yaml:ro

  liquibase:
    image: liquibase/liquibase
    container_name: liquibase
    environment:
      - LIQUIBASE_COMMAND_URL=jdbc:postgresql://db:5432/cardefectscan
      - LIQUIBASE_COMMAND_USERNAME=${POSTGRES_USER:-postgres}
      - LIQUIBASE_COMMAND_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - LIQUIBASE_COMMAND_CHANGELOG_FILE=/changelog/db.changelog-master.xml
    volumes:
      - ./liquibase/changelog:/liquibase/changelog:ro
    depends_on:
      db:
        condition: service_healthy
    entrypoint: [ "liquibase", "update" ]

  db:
    image: postgres:16-alpine
    container_name: db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: cardefectscan
    volumes:
      - ./volumes/db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d cardefectscan" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Web UI
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniominiominio}
      MINIO_SERVER_URL: http://${APP_DOMAIN:-localhost}:9000
      MINIO_NOTIFY_AMQP_ENABLE: "on"
      MINIO_NOTIFY_AMQP_URL: amqp://${RABBITMQ_USER:-rabbitmq}:${RABBITMQ_PASSWORD:-rabbitmq}@rabbitmq:5672
      MINIO_NOTIFY_AMQP_EXCHANGE: "minio-events"
      MINIO_NOTIFY_AMQP_EXCHANGE_TYPE: "fanout"
      MINIO_NOTIFY_AMQP_DURABLE: "on"
      MINIO_NOTIFY_AMQP_ROUTING_KEY: "minio"
    volumes:
      - ./volumes/minio_data:/data
    command: server --console-address ":9001" /data
    restart: unless-stopped

  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      - minio
      - rabbitmq
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniominiominio}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME:-default}
    entrypoint: >
      sh -c "
      until mc alias set local http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; do
        echo 'Waiting for MinIO...';
        sleep 3;
      done;
      mc mb --ignore-existing local/$MINIO_BUCKET_NAME;
      mc event add local/$MINIO_BUCKET_NAME arn:minio:sqs::_:amqp --event put;
      echo 'MinIO notifications configured';
      "

  rabbitmq:
    image: rabbitmq:4.0.7-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672" # UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq}
    volumes:
      - ./volumes/rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped

  mockserver:
    image: orobtsovv/model-service-mock:latest
    container_name: mockserver
    hostname: mockserver
    ports:
      - "8888:8080"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minio}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-miniominiominio}
      RABBITMQ_USER: ${RABBITMQ_USER:-rabbitmq}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD:-rabbitmq}
