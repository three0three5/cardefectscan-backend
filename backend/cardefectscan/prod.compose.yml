version: '3.8'

services:
  swagger-ui:
    image: swaggerapi/swagger-ui
    container_name: swagger-ui
    ports:
      - "8081:8080"
    environment:
      SWAGGER_JSON: /swagger.yaml
    volumes:
      - ./src/main/resources/cardefectscan.yaml:/swagger.yaml:ro

  liquibase:
    image: liquibase/liquibase
    container_name: liquibase
    environment:
      - LIQUIBASE_COMMAND_URL=jdbc:postgresql://db:5432/cardefectscan
      - LIQUIBASE_COMMAND_USERNAME=${POSTGRES_USER}
      - LIQUIBASE_COMMAND_PASSWORD=${POSTGRES_PASSWORD}
      - LIQUIBASE_COMMAND_CHANGELOG_FILE=/changelog/db.changelog-master.xml
    volumes:
      - ./liquibase/changelog:/liquibase/changelog:ro
    depends_on:
      db:
        condition: service_healthy
    entrypoint: [ "liquibase", "update" ]

  db:
    image: postgres:16-alpine
    container_name: db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: cardefectscan
    volumes:
      - ./volumes/db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d cardefectscan" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9001:9001"  # Web UI
      - "9000:9000"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: http://${APP_DOMAIN}:9000
      MINIO_NOTIFY_AMQP_ENABLE: "on"
      MINIO_NOTIFY_AMQP_URL: "amqp://${RABBITMQ_USER}:${RABBITMQ_PASSWORD}@rabbitmq:5672"
      MINIO_NOTIFY_AMQP_EXCHANGE: "minio-events"
      MINIO_NOTIFY_AMQP_EXCHANGE_TYPE: "fanout"
      MINIO_NOTIFY_AMQP_DURABLE: "on"
      MINIO_NOTIFY_AMQP_ROUTING_KEY: "minio"
    volumes:
      - ./volumes/minio_data:/data
    command: server --console-address ":9001" /data
    restart: unless-stopped

  mc:
    image: minio/mc
    container_name: mc
    depends_on:
      - minio
      - rabbitmq
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BUCKET_NAME: ${MINIO_BUCKET_NAME}
    entrypoint: >
      sh -c "
      until mc alias set local http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD; do
        echo 'Waiting for MinIO...';
        sleep 3;
      done;
      mc mb --ignore-existing local/$MINIO_BUCKET_NAME;
      mc event add local/$MINIO_BUCKET_NAME arn:minio:sqs::_:amqp --event put;
      echo 'MinIO notifications configured';
      "

  rabbitmq:
    image: rabbitmq:4.0.7-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "15672:15672" # UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    volumes:
      - ./volumes/rabbitmq_data:/var/lib/rabbitmq
    restart: unless-stopped

  model-service:
    image: orobtsovv/model-service-mock:latest
    container_name: model-service
    hostname: model-service
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}

  cardefectscan:
    image: orobtsovv/cardefectscan:latest
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      JAVA_OPTS: "-javaagent:/usr/src/app/javaagent.jar -Dotel.metric.export.interval=15s -Dotel.instrumentation.http.server.active-requests.enabled=true -Dotel.exporter.otlp.endpoint=http://otel-collector:4317 -Dotel.exporter.otlp.protocol=grpc -Dotel.service.name=cardefectscan"
      POSTGRES_HOST: db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: ${RABBITMQ_USER}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
      APP_DOMAIN: ${APP_DOMAIN}
      APP_HOST: ${APP_HOST}
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MODEL_SERVICE_HOST: http://model-service
      IS_COOKIE_SECURE: false
      IS_COOKIE_HTTP_ONLY: false

  otel-collector:
    image: "otel/opentelemetry-collector:latest"
    ports:
      - "9090:9090"
    volumes:
      - ./otel-collector-config.yaml:/etc/otelcol-config.yaml
      - ./volumes/otel-collector-data:/otel-collector/data
    command: [
      "--config", "/etc/otelcol-config.yaml"
    ]

  prometheus:
    image: prom/prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./volumes/prometheus-data:/prometheus

  loki:
    image: grafana/loki
    volumes:
      - ./loki-config.yaml:/etc/loki/loki-config.yaml
      - ./volumes/loki-data:/loki
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - loki
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_PASSWORD}
    volumes:
      - ./volumes/grafana-data:/var/lib/grafana
#
#  tempo:
#    image: grafana/tempo
#    ports:
#      - "9411:9411"
#    volumes:
#      - ./tempo-config.yaml:/etc/tempo/tempo-config.yaml
